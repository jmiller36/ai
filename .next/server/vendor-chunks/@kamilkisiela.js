"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@kamilkisiela";
exports.ids = ["vendor-chunks/@kamilkisiela"];
exports.modules = {

/***/ "(rsc)/./node_modules/@kamilkisiela/fast-url-parser/src/punycode.js":
/*!********************************************************************!*\
  !*** ./node_modules/@kamilkisiela/fast-url-parser/src/punycode.js ***!
  \********************************************************************/
/***/ ((module) => {

eval("// taken directly from https://www.npmjs.com/package/punycode\n\n\n/** Highest positive signed 32-bit float value */\nvar maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nvar base = 36;\nvar tMin = 1;\nvar tMax = 26;\nvar skew = 38;\nvar damp = 700;\nvar initialBias = 72;\nvar initialN = 128; // 0x80\nvar delimiter = \"-\"; // '\\x2D'\n\n/** Regular expressions */\nvar regexNonASCII = /[^\\0-\\x7F]/; // Note: U+007F DEL is excluded too.\nvar regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nvar errors = {\n  \"overflow\": \"Overflow: input needs wider integers to process\",\n  \"not-basic\": \"Illegal input >= 0x80 (not a basic code point)\",\n  \"invalid-input\": \"Invalid input\",\n};\n\n/** Convenience shortcuts */\nvar baseMinusTMin = base - tMin;\nvar floor = Math.floor;\nvar stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n  throw new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, callback) {\n  var result = [];\n  var length = array.length;\n  while (length--) {\n    result[length] = callback(array[length]);\n  }\n  return result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {String} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(domain, callback) {\n  var parts = domain.split(\"@\");\n  var result = \"\";\n  if (parts.length > 1) {\n    // In email addresses, only the domain name should be punycoded. Leave\n    // the local part (i.e. everything up to `@`) intact.\n    result = parts[0] + \"@\";\n    domain = parts[1];\n  }\n  // Avoid `split(regex)` for IE8 compatibility. See #17.\n  domain = domain.replace(regexSeparators, \"\\x2E\");\n  var labels = domain.split(\".\");\n  var encoded = map(labels, callback).join(\".\");\n  return result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n  var output = [];\n  var counter = 0;\n  var length = string.length;\n  while (counter < length) {\n    var value = string.charCodeAt(counter++);\n    if (value >= 0xd800 && value <= 0xdbff && counter < length) {\n      // It's a high surrogate, and there is a next character.\n      var extra = string.charCodeAt(counter++);\n      if ((extra & 0xfc00) === 0xdc00) {\n        // Low surrogate.\n        output.push(((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000);\n      } else {\n        // It's an unmatched surrogate; only append this code unit, in case the\n        // next code unit is the high surrogate of a surrogate pair.\n        output.push(value);\n        counter--;\n      }\n    } else {\n      output.push(value);\n    }\n  }\n  return output;\n}\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nvar digitToBasic = function (digit, flag) {\n  //  0..25 map to ASCII a..z or A..Z\n  // 26..35 map to ASCII 0..9\n  return digit + 22 + 75 * (digit < 26) - ((flag !== 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nvar adapt = function (delta, numPoints, firstTime) {\n  var k = 0;\n  delta = firstTime ? floor(delta / damp) : delta >> 1;\n  delta += floor(delta / numPoints);\n  for (; /* no initialization */ delta > (baseMinusTMin * tMax) >> 1; k += base) {\n    delta = floor(delta / baseMinusTMin);\n  }\n  return floor(k + ((baseMinusTMin + 1) * delta) / (delta + skew));\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nvar encode = function (input) {\n  var output = [];\n\n  // Convert the input in UCS-2 to an array of Unicode code points.\n  input = ucs2decode(input);\n\n  // Cache the length.\n  var inputLength = input.length;\n\n  // Initialize the state.\n  var n = initialN;\n  var delta = 0;\n  var bias = initialBias;\n\n  // Handle the basic code points.\n  for (var currentValue of input) {\n    if (currentValue < 0x80) {\n      output.push(stringFromCharCode(currentValue));\n    }\n  }\n\n  var basicLength = output.length;\n  var handledCPCount = basicLength;\n\n  // `handledCPCount` is the number of code points that have been handled;\n  // `basicLength` is the number of basic code points.\n\n  // Finish the basic string with a delimiter unless it's empty.\n  if (basicLength) {\n    output.push(delimiter);\n  }\n\n  // Main encoding loop:\n  while (handledCPCount < inputLength) {\n    // All non-basic code points < n have been handled already. Find the next\n    // larger one:\n    var m = maxInt;\n    for (var currentValue of input) {\n      if (currentValue >= n && currentValue < m) {\n        m = currentValue;\n      }\n    }\n\n    // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n    // but guard against overflow.\n    var handledCPCountPlusOne = handledCPCount + 1;\n    if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n      error(\"overflow\");\n    }\n\n    delta += (m - n) * handledCPCountPlusOne;\n    n = m;\n\n    for (var currentValue of input) {\n      if (currentValue < n && ++delta > maxInt) {\n        error(\"overflow\");\n      }\n      if (currentValue === n) {\n        // Represent delta as a generalized variable-length integer.\n        var q = delta;\n        for (var k = base /* no condition */; ; k += base) {\n          var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n          if (q < t) {\n            break;\n          }\n          var qMinusT = q - t;\n          var baseMinusT = base - t;\n          output.push(stringFromCharCode(digitToBasic(t + (qMinusT % baseMinusT), 0)));\n          q = floor(qMinusT / baseMinusT);\n        }\n\n        output.push(stringFromCharCode(digitToBasic(q, 0)));\n        bias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);\n        delta = 0;\n        ++handledCPCount;\n      }\n    }\n\n    ++delta;\n    ++n;\n  }\n  return output.join(\"\");\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nvar toASCII = function (input) {\n  return mapDomain(input, function (string) {\n    return regexNonASCII.test(string) ? \"xn--\" + encode(string) : string;\n  });\n};\n\n/*--------------------------------------------------------------------------*/\n\nmodule.exports = {\n    toASCII: toASCII\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@kamilkisiela/fast-url-parser/src/punycode.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@kamilkisiela/fast-url-parser/src/urlparser.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@kamilkisiela/fast-url-parser/src/urlparser.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/*\nCopyright (c) 2014 Petka Antonov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\nfunction Url() {\n    //For more efficient internal representation and laziness.\n    //The non-underscore versions of these properties are accessor functions\n    //defined on the prototype.\n    this._protocol = null;\n    this._href = \"\";\n    this._port = -1;\n    this._query = null;\n\n    this.auth = null;\n    this.slashes = null;\n    this.host = null;\n    this.hostname = null;\n    this.hash = null;\n    this.search = null;\n    this.pathname = null;\n\n    this._prependSlash = false;\n}\n\nvar querystring = __webpack_require__(/*! querystring */ \"querystring\");\n\nUrl.queryString = querystring;\n\nUrl.prototype.parse =\nfunction Url$parse(str, parseQueryString, hostDenotesSlash, disableAutoEscapeChars) {\n    if (typeof str !== \"string\") {\n        throw new TypeError(\"Parameter 'url' must be a string, not \" +\n            typeof str);\n    }\n    var start = 0;\n    var end = str.length - 1;\n\n    //Trim leading and trailing ws\n    while (str.charCodeAt(start) <= 0x20 /*' '*/) start++;\n    while (str.charCodeAt(end) <= 0x20 /*' '*/) end--;\n\n    start = this._parseProtocol(str, start, end);\n\n    //Javascript doesn't have host\n    if (this._protocol !== \"javascript\") {\n        start = this._parseHost(str, start, end, hostDenotesSlash);\n        var proto = this._protocol;\n        if (!this.hostname &&\n            (this.slashes || (proto && !slashProtocols[proto]))) {\n            this.hostname = this.host = \"\";\n        }\n    }\n\n    if (start <= end) {\n        var ch = str.charCodeAt(start);\n\n        if (ch === 0x2F /*'/'*/ || ch === 0x5C /*'\\'*/) {\n            this._parsePath(str, start, end, disableAutoEscapeChars);\n        }\n        else if (ch === 0x3F /*'?'*/) {\n            this._parseQuery(str, start, end, disableAutoEscapeChars);\n        }\n        else if (ch === 0x23 /*'#'*/) {\n          this._parseHash(str, start, end, disableAutoEscapeChars);\n        }\n        else if (this._protocol !== \"javascript\") {\n            this._parsePath(str, start, end, disableAutoEscapeChars);\n        }\n        else { //For javascript the pathname is just the rest of it\n            this.pathname = str.slice(start, end + 1 );\n        }\n\n    }\n\n    if (!this.pathname && this.hostname &&\n        this._slashProtocols[this._protocol]) {\n        this.pathname = \"/\";\n    }\n\n    if (parseQueryString) {\n        var search = this.search;\n        if (search == null) {\n            search = this.search = \"\";\n        }\n        if (search.charCodeAt(0) === 0x3F /*'?'*/) {\n            search = search.slice(1);\n        }\n        //This calls a setter function, there is no .query data property\n        this.query = Url.queryString.parse(search);\n    }\n};\n\nUrl.prototype.resolve = function Url$resolve(relative) {\n    return this.resolveObject(Url.parse(relative, false, true)).format();\n};\n\nUrl.prototype.format = function Url$format() {\n    var auth = this.auth || \"\";\n\n    if (auth) {\n        auth = encodeURIComponent(auth);\n        auth = auth.replace(/%3A/i, \":\");\n        auth += \"@\";\n    }\n\n    var protocol = this.protocol || \"\";\n    var pathname = this.pathname || \"\";\n    var hash = this.hash || \"\";\n    var search = this.search || \"\";\n    var query = \"\";\n    var hostname = this.hostname || \"\";\n    var port = this.port || \"\";\n    var host = false;\n    var scheme = \"\";\n\n    //Cache the result of the getter function\n    var q = this.query;\n    if (q && typeof q === \"object\") {\n        query = Url.queryString.stringify(q);\n    }\n\n    if (!search) {\n        search = query ? \"?\" + query : \"\";\n    }\n\n    if (protocol && protocol.charCodeAt(protocol.length - 1) !== 0x3A /*':'*/)\n        protocol += \":\";\n\n    if (this.host) {\n        host = auth + this.host;\n    }\n    else if (hostname) {\n        var ip6 = hostname.indexOf(\":\") > -1;\n        if (ip6) hostname = \"[\" + hostname + \"]\";\n        host = auth + hostname + (port ? \":\" + port : \"\");\n    }\n\n    var slashes = this.slashes ||\n        ((!protocol ||\n        slashProtocols[protocol]) && host !== false);\n\n\n    if (protocol) scheme = protocol + (slashes ? \"//\" : \"\");\n    else if (slashes) scheme = \"//\";\n\n    if (slashes && pathname && pathname.charCodeAt(0) !== 0x2F /*'/'*/) {\n        pathname = \"/\" + pathname;\n    }\n    if (search && search.charCodeAt(0) !== 0x3F /*'?'*/)\n        search = \"?\" + search;\n    if (hash && hash.charCodeAt(0) !== 0x23 /*'#'*/)\n        hash = \"#\" + hash;\n\n    pathname = escapePathName(pathname);\n    search = escapeSearch(search);\n\n    return scheme + (host === false ? \"\" : host) + pathname + search + hash;\n};\n\nUrl.prototype.resolveObject = function Url$resolveObject(relative) {\n    if (typeof relative === \"string\")\n        relative = Url.parse(relative, false, true);\n\n    var result = this._clone();\n\n    // hash is always overridden, no matter what.\n    // even href=\"\" will remove it.\n    result.hash = relative.hash;\n\n    // if the relative url is empty, then there\"s nothing left to do here.\n    if (!relative.href) {\n        result._href = \"\";\n        return result;\n    }\n\n    // hrefs like //foo/bar always cut to the protocol.\n    if (relative.slashes && !relative._protocol) {\n        relative._copyPropsTo(result, true);\n\n        if (slashProtocols[result._protocol] &&\n            result.hostname && !result.pathname) {\n            result.pathname = \"/\";\n        }\n        result._href = \"\";\n        return result;\n    }\n\n    if (relative._protocol && relative._protocol !== result._protocol) {\n        // if it\"s a known url protocol, then changing\n        // the protocol does weird things\n        // first, if it\"s not file:, then we MUST have a host,\n        // and if there was a path\n        // to begin with, then we MUST have a path.\n        // if it is file:, then the host is dropped,\n        // because that\"s known to be hostless.\n        // anything else is assumed to be absolute.\n        if (!slashProtocols[relative._protocol]) {\n            relative._copyPropsTo(result, false);\n            result._href = \"\";\n            return result;\n        }\n\n        result._protocol = relative._protocol;\n        if (!relative.host && relative._protocol !== \"javascript\") {\n            var relPath = (relative.pathname || \"\").split(\"/\");\n            while (relPath.length && !(relative.host = relPath.shift()));\n            if (!relative.host) relative.host = \"\";\n            if (!relative.hostname) relative.hostname = \"\";\n            if (relPath[0] !== \"\") relPath.unshift(\"\");\n            if (relPath.length < 2) relPath.unshift(\"\");\n            result.pathname = relPath.join(\"/\");\n        } else {\n            result.pathname = relative.pathname;\n        }\n\n        result.search = relative.search;\n        result.host = relative.host || \"\";\n        result.auth = relative.auth;\n        result.hostname = relative.hostname || relative.host;\n        result._port = relative._port;\n        result.slashes = result.slashes || relative.slashes;\n        result._href = \"\";\n        return result;\n    }\n\n    var isSourceAbs =\n        (result.pathname && result.pathname.charCodeAt(0) === 0x2F /*'/'*/);\n    var isRelAbs = (\n            relative.host ||\n            (relative.pathname &&\n            relative.pathname.charCodeAt(0) === 0x2F /*'/'*/)\n        );\n    var mustEndAbs = (isRelAbs || isSourceAbs ||\n                        (result.host && relative.pathname));\n\n    var removeAllDots = mustEndAbs;\n\n    var srcPath = result.pathname && result.pathname.split(\"/\") || [];\n    var relPath = relative.pathname && relative.pathname.split(\"/\") || [];\n    var psychotic = result._protocol && !slashProtocols[result._protocol];\n\n    // if the url is a non-slashed url, then relative\n    // links like ../.. should be able\n    // to crawl up to the hostname, as well.  This is strange.\n    // result.protocol has already been set by now.\n    // Later on, put the first path part into the host field.\n    if (psychotic) {\n        result.hostname = \"\";\n        result._port = -1;\n        if (result.host) {\n            if (srcPath[0] === \"\") srcPath[0] = result.host;\n            else srcPath.unshift(result.host);\n        }\n        result.host = \"\";\n        if (relative._protocol) {\n            relative.hostname = \"\";\n            relative._port = -1;\n            if (relative.host) {\n                if (relPath[0] === \"\") relPath[0] = relative.host;\n                else relPath.unshift(relative.host);\n            }\n            relative.host = \"\";\n        }\n        mustEndAbs = mustEndAbs && (relPath[0] === \"\" || srcPath[0] === \"\");\n    }\n\n    if (isRelAbs) {\n        // it\"s absolute.\n        result.host = relative.host ?\n            relative.host : result.host;\n        result.hostname = relative.hostname ?\n            relative.hostname : result.hostname;\n        result.search = relative.search;\n        srcPath = relPath;\n        // fall through to the dot-handling below.\n    } else if (relPath.length) {\n        // it\"s relative\n        // throw away the existing file, and take the new path instead.\n        if (!srcPath) srcPath = [];\n        srcPath.pop();\n        srcPath = srcPath.concat(relPath);\n        result.search = relative.search;\n    } else if (relative.search) {\n        // just pull out the search.\n        // like href=\"?foo\".\n        // Put this after the other two cases because it simplifies the booleans\n        if (psychotic) {\n            result.hostname = result.host = srcPath.shift();\n            //occationaly the auth can get stuck only in host\n            //this especialy happens in cases like\n            //url.resolveObject(\"mailto:local1@domain1\", \"local2@domain2\")\n            var authInHost = result.host && result.host.indexOf(\"@\") > 0 ?\n                result.host.split(\"@\") : false;\n            if (authInHost) {\n                result.auth = authInHost.shift();\n                result.host = result.hostname = authInHost.shift();\n            }\n        }\n        result.search = relative.search;\n        result._href = \"\";\n        return result;\n    }\n\n    if (!srcPath.length) {\n        // no path at all.  easy.\n        // we\"ve already handled the other stuff above.\n        result.pathname = null;\n        result._href = \"\";\n        return result;\n    }\n\n    // if a url ENDs in . or .., then it must get a trailing slash.\n    // however, if it ends in anything else non-slashy,\n    // then it must NOT get a trailing slash.\n    var last = srcPath.slice(-1)[0];\n    var hasTrailingSlash = (\n        (result.host || relative.host) && (last === \".\" || last === \"..\") ||\n        last === \"\");\n\n    // strip single dots, resolve double dots to parent dir\n    // if the path tries to go above the root, `up` ends up > 0\n    var up = 0;\n    for (var i = srcPath.length; i >= 0; i--) {\n        last = srcPath[i];\n        if (last === \".\") {\n            srcPath.splice(i, 1);\n        } else if (last === \"..\") {\n            srcPath.splice(i, 1);\n            up++;\n        } else if (up) {\n            srcPath.splice(i, 1);\n            up--;\n        }\n    }\n\n    // if the path is allowed to go above the root, restore leading ..s\n    if (!mustEndAbs && !removeAllDots) {\n        for (; up--; up) {\n            srcPath.unshift(\"..\");\n        }\n    }\n\n    if (mustEndAbs && srcPath[0] !== \"\" &&\n        (!srcPath[0] || srcPath[0].charCodeAt(0) !== 0x2F /*'/'*/)) {\n        srcPath.unshift(\"\");\n    }\n\n    if (hasTrailingSlash && (srcPath.join(\"/\").substr(-1) !== \"/\")) {\n        srcPath.push(\"\");\n    }\n\n    var isAbsolute = srcPath[0] === \"\" ||\n        (srcPath[0] && srcPath[0].charCodeAt(0) === 0x2F /*'/'*/);\n\n    // put the host back\n    if (psychotic) {\n        result.hostname = result.host = isAbsolute ? \"\" :\n            srcPath.length ? srcPath.shift() : \"\";\n        //occationaly the auth can get stuck only in host\n        //this especialy happens in cases like\n        //url.resolveObject(\"mailto:local1@domain1\", \"local2@domain2\")\n        var authInHost = result.host && result.host.indexOf(\"@\") > 0 ?\n            result.host.split(\"@\") : false;\n        if (authInHost) {\n            result.auth = authInHost.shift();\n            result.host = result.hostname = authInHost.shift();\n        }\n    }\n\n    mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n    if (mustEndAbs && !isAbsolute) {\n        srcPath.unshift(\"\");\n    }\n\n    result.pathname = srcPath.length === 0 ? null : srcPath.join(\"/\");\n    result.auth = relative.auth || result.auth;\n    result.slashes = result.slashes || relative.slashes;\n    result._href = \"\";\n    return result;\n};\n\nvar punycode = __webpack_require__(/*! ./punycode */ \"(rsc)/./node_modules/@kamilkisiela/fast-url-parser/src/punycode.js\");\nUrl.prototype._hostIdna = function Url$_hostIdna(hostname) {\n    // IDNA Support: Returns a punycoded representation of \"domain\".\n    // It only converts parts of the domain name that\n    // have non-ASCII characters, i.e. it doesn't matter if\n    // you call it with a domain that already is ASCII-only.\n    return punycode.toASCII(hostname);\n};\n\nvar escapePathName = Url.prototype._escapePathName =\nfunction Url$_escapePathName(pathname) {\n    if (!containsCharacter2(pathname, 0x23 /*'#'*/, 0x3F /*'?'*/)) {\n        return pathname;\n    }\n    //Avoid closure creation to keep this inlinable\n    return _escapePath(pathname);\n};\n\nvar escapeSearch = Url.prototype._escapeSearch =\nfunction Url$_escapeSearch(search) {\n    if (!containsCharacter2(search, 0x23 /*'#'*/, -1)) return search;\n    //Avoid closure creation to keep this inlinable\n    return _escapeSearch(search);\n};\n\nUrl.prototype._parseProtocol = function Url$_parseProtocol(str, start, end) {\n    var doLowerCase = false;\n    var protocolCharacters = this._protocolCharacters;\n\n    for (var i = start; i <= end; ++i) {\n        var ch = str.charCodeAt(i);\n\n        if (ch === 0x3A /*':'*/) {\n            var protocol = str.slice(start, i);\n            if (doLowerCase) protocol = protocol.toLowerCase();\n            this._protocol = protocol;\n            return i + 1;\n        }\n        else if (protocolCharacters[ch] === 1) {\n            if (ch < 0x61 /*'a'*/)\n                doLowerCase = true;\n        }\n        else {\n            return start;\n        }\n\n    }\n    return start;\n};\n\nUrl.prototype._parseAuth = function Url$_parseAuth(str, start, end, decode) {\n    var auth = str.slice(start, end + 1);\n    if (decode) {\n        auth = decodeURIComponent(auth);\n    }\n    this.auth = auth;\n};\n\nUrl.prototype._parsePort = function Url$_parsePort(str, start, end) {\n    //Internal format is integer for more efficient parsing\n    //and for efficient trimming of leading zeros\n    var port = 0;\n    //Distinguish between :0 and : (no port number at all)\n    var hadChars = false;\n    var validPort = true;\n\n    for (var i = start; i <= end; ++i) {\n        var ch = str.charCodeAt(i);\n\n        if (0x30 /*'0'*/ <= ch && ch <= 0x39 /*'9'*/) {\n            port = (10 * port) + (ch - 0x30 /*'0'*/);\n            hadChars = true;\n        }\n        else {\n            validPort = false;\n            if (ch === 0x5C/*'\\'*/ || ch === 0x2F/*'/'*/) {\n                validPort = true;\n            }\n            break;\n        }\n\n    }\n    if ((port === 0 && !hadChars) || !validPort) {\n        if (!validPort) {\n            this._port = -2;\n        }\n        return 0;\n    }\n\n    this._port = port;\n    return i - start;\n};\n\nUrl.prototype._parseHost =\nfunction Url$_parseHost(str, start, end, slashesDenoteHost) {\n    var hostEndingCharacters = this._hostEndingCharacters;\n    var first = str.charCodeAt(start);\n    var second = str.charCodeAt(start + 1);\n    if ((first === 0x2F /*'/'*/ || first === 0x5C /*'\\'*/) &&\n        (second === 0x2F /*'/'*/ || second === 0x5C /*'\\'*/)) {\n        this.slashes = true;\n\n        //The string starts with //\n        if (start === 0) {\n            //The string is just \"//\"\n            if (end < 2) return start;\n            //If slashes do not denote host and there is no auth,\n            //there is no host when the string starts with //\n            var hasAuth =\n                containsCharacter(str, 0x40 /*'@'*/, 2, hostEndingCharacters);\n            if (!hasAuth && !slashesDenoteHost) {\n                this.slashes = null;\n                return start;\n            }\n        }\n        //There is a host that starts after the //\n        start += 2;\n    }\n    //If there is no slashes, there is no hostname if\n    //1. there was no protocol at all\n    else if (!this._protocol ||\n        //2. there was a protocol that requires slashes\n        //e.g. in 'http:asd' 'asd' is not a hostname\n        slashProtocols[this._protocol]\n    ) {\n        return start;\n    }\n\n    var doLowerCase = false;\n    var idna = false;\n    var hostNameStart = start;\n    var hostNameEnd = end;\n    var lastCh = -1;\n    var portLength = 0;\n    var charsAfterDot = 0;\n    var authNeedsDecoding = false;\n\n    var j = -1;\n\n    //Find the last occurrence of an @-sign until hostending character is met\n    //also mark if decoding is needed for the auth portion\n    for (var i = start; i <= end; ++i) {\n        var ch = str.charCodeAt(i);\n\n        if (ch === 0x40 /*'@'*/) {\n            j = i;\n        }\n        //This check is very, very cheap. Unneeded decodeURIComponent is very\n        //very expensive\n        else if (ch === 0x25 /*'%'*/) {\n            authNeedsDecoding = true;\n        }\n        else if (hostEndingCharacters[ch] === 1) {\n            break;\n        }\n    }\n\n    //@-sign was found at index j, everything to the left from it\n    //is auth part\n    if (j > -1) {\n        this._parseAuth(str, start, j - 1, authNeedsDecoding);\n        //hostname starts after the last @-sign\n        start = hostNameStart = j + 1;\n    }\n\n    //Host name is starting with a [\n    if (str.charCodeAt(start) === 0x5B /*'['*/) {\n        for (var i = start + 1; i <= end; ++i) {\n            var ch = str.charCodeAt(i);\n\n            //Assume valid IP6 is between the brackets\n            if (ch === 0x5D /*']'*/) {\n                if (str.charCodeAt(i + 1) === 0x3A /*':'*/) {\n                    portLength = this._parsePort(str, i + 2, end) + 1;\n                }\n                var hostname = str.slice(start + 1, i).toLowerCase();\n                this.hostname = hostname;\n                this.host = this._port > 0 ?\n                    \"[\" + hostname + \"]:\" + this._port :\n                    \"[\" + hostname + \"]\";\n                this.pathname = \"/\";\n                return i + portLength + 1;\n            }\n        }\n        //Empty hostname, [ starts a path\n        return start;\n    }\n\n    for (var i = start; i <= end; ++i) {\n        if (charsAfterDot > 62) {\n            this.hostname = this.host = str.slice(start, i);\n            return i;\n        }\n        var ch = str.charCodeAt(i);\n\n        if (ch === 0x3A /*':'*/) {\n            portLength = this._parsePort(str, i + 1, end) + 1;\n            hostNameEnd = i - 1;\n            break;\n        }\n        else if (ch < 0x61 /*'a'*/) {\n            if (ch === 0x2E /*'.'*/) {\n                //Node.js ignores this error\n                /*\n                if (lastCh === DOT || lastCh === -1) {\n                    this.hostname = this.host = \"\";\n                    return start;\n                }\n                */\n                charsAfterDot = -1;\n            }\n            else if (0x41 /*'A'*/ <= ch && ch <= 0x5A /*'Z'*/) {\n                doLowerCase = true;\n            }\n            //Valid characters other than ASCII letters -, _, +, 0-9\n            else if (!(ch === 0x2D /*'-'*/ ||\n                       ch === 0x5F /*'_'*/ ||\n                       ch === 0x2B /*'+'*/ ||\n                       (0x30 /*'0'*/ <= ch && ch <= 0x39 /*'9'*/))\n                ) {\n                if (hostEndingCharacters[ch] === 0 &&\n                    this._noPrependSlashHostEnders[ch] === 0) {\n                    this._prependSlash = true;\n                }\n                hostNameEnd = i - 1;\n                break;\n            }\n        }\n        else if (ch >= 0x7B /*'{'*/) {\n            if (ch <= 0x7E /*'~'*/) {\n                if (this._noPrependSlashHostEnders[ch] === 0) {\n                    this._prependSlash = true;\n                }\n                hostNameEnd = i - 1;\n                break;\n            }\n            idna = true;\n        }\n        lastCh = ch;\n        charsAfterDot++;\n    }\n\n    //Node.js ignores this error\n    /*\n    if (lastCh === DOT) {\n        hostNameEnd--;\n    }\n    */\n\n    if (hostNameEnd + 1 !== start &&\n        hostNameEnd - hostNameStart <= 256) {\n        var hostname = str.slice(hostNameStart, hostNameEnd + 1);\n        if (doLowerCase) hostname = hostname.toLowerCase();\n        if (idna) hostname = this._hostIdna(hostname);\n        this.hostname = hostname;\n        this.host = this._port > 0 ? hostname + \":\" + this._port : hostname;\n    }\n\n    return hostNameEnd + 1 + portLength;\n\n};\n\nUrl.prototype._copyPropsTo = function Url$_copyPropsTo(input, noProtocol) {\n    if (!noProtocol) {\n        input._protocol = this._protocol;\n    }\n    input._href = this._href;\n    input._port = this._port;\n    input._prependSlash = this._prependSlash;\n    input.auth = this.auth;\n    input.slashes = this.slashes;\n    input.host = this.host;\n    input.hostname = this.hostname;\n    input.hash = this.hash;\n    input.search = this.search;\n    input.pathname = this.pathname;\n};\n\nUrl.prototype._clone = function Url$_clone() {\n    var ret = new Url();\n    ret._protocol = this._protocol;\n    ret._href = this._href;\n    ret._port = this._port;\n    ret._prependSlash = this._prependSlash;\n    ret.auth = this.auth;\n    ret.slashes = this.slashes;\n    ret.host = this.host;\n    ret.hostname = this.hostname;\n    ret.hash = this.hash;\n    ret.search = this.search;\n    ret.pathname = this.pathname;\n    return ret;\n};\n\nUrl.prototype._getComponentEscaped =\nfunction Url$_getComponentEscaped(str, start, end, isAfterQuery) {\n    var cur = start;\n    var i = start;\n    var ret = \"\";\n    var autoEscapeMap = isAfterQuery ?\n        this._afterQueryAutoEscapeMap : this._autoEscapeMap;\n    for (; i <= end; ++i) {\n        var ch = str.charCodeAt(i);\n        var escaped = autoEscapeMap[ch];\n\n        if (escaped !== \"\" && escaped !== undefined) {\n            if (cur < i) ret += str.slice(cur, i);\n            ret += escaped;\n            cur = i + 1;\n        }\n    }\n    if (cur < i + 1) ret += str.slice(cur, i);\n    return ret;\n};\n\nUrl.prototype._parsePath =\nfunction Url$_parsePath(str, start, end, disableAutoEscapeChars) {\n    var pathStart = start;\n    var pathEnd = end;\n    var escape = false;\n    var autoEscapeCharacters = this._autoEscapeCharacters;\n    var prePath = this._port === -2 ? \"/:\" : \"\";\n\n    for (var i = start; i <= end; ++i) {\n        var ch = str.charCodeAt(i);\n        if (ch === 0x23 /*'#'*/) {\n          this._parseHash(str, i, end, disableAutoEscapeChars);\n            pathEnd = i - 1;\n            break;\n        }\n        else if (ch === 0x3F /*'?'*/) {\n            this._parseQuery(str, i, end, disableAutoEscapeChars);\n            pathEnd = i - 1;\n            break;\n        }\n        else if (!disableAutoEscapeChars && !escape && autoEscapeCharacters[ch] === 1) {\n            escape = true;\n        }\n    }\n\n    if (pathStart > pathEnd) {\n        this.pathname = prePath === \"\" ? \"/\" : prePath;\n        return;\n    }\n\n    var path;\n    if (escape) {\n        path = this._getComponentEscaped(str, pathStart, pathEnd, false);\n    }\n    else {\n        path = str.slice(pathStart, pathEnd + 1);\n    }\n    this.pathname = prePath === \"\"\n        ? (this._prependSlash ? \"/\" + path : path)\n        : prePath + path;\n};\n\nUrl.prototype._parseQuery = function Url$_parseQuery(str, start, end, disableAutoEscapeChars) {\n    var queryStart = start;\n    var queryEnd = end;\n    var escape = false;\n    var autoEscapeCharacters = this._autoEscapeCharacters;\n\n    for (var i = start; i <= end; ++i) {\n        var ch = str.charCodeAt(i);\n\n        if (ch === 0x23 /*'#'*/) {\n            this._parseHash(str, i, end, disableAutoEscapeChars);\n            queryEnd = i - 1;\n            break;\n        }\n        else if (!disableAutoEscapeChars && !escape && autoEscapeCharacters[ch] === 1) {\n            escape = true;\n        }\n    }\n\n    if (queryStart > queryEnd) {\n        this.search = \"\";\n        return;\n    }\n\n    var query;\n    if (escape) {\n        query = this._getComponentEscaped(str, queryStart, queryEnd, true);\n    }\n    else {\n        query = str.slice(queryStart, queryEnd + 1);\n    }\n    this.search = query;\n};\n\nUrl.prototype._parseHash = function Url$_parseHash(str, start, end, disableAutoEscapeChars) {\n    if (start > end) {\n        this.hash = \"\";\n        return;\n    }\n\n    this.hash = disableAutoEscapeChars ?\n        str.slice(start, end + 1) : this._getComponentEscaped(str, start, end, true);\n};\n\nObject.defineProperty(Url.prototype, \"port\", {\n    get: function() {\n        if (this._port >= 0) {\n            return (\"\" + this._port);\n        }\n        return null;\n    },\n    set: function(v) {\n        if (v == null) {\n            this._port = -1;\n        }\n        else {\n            this._port = parseInt(v, 10);\n        }\n    }\n});\n\nObject.defineProperty(Url.prototype, \"query\", {\n    get: function() {\n        var query = this._query;\n        if (query != null) {\n            return query;\n        }\n        var search = this.search;\n\n        if (search) {\n            if (search.charCodeAt(0) === 0x3F /*'?'*/) {\n                search = search.slice(1);\n            }\n            if (search !== \"\") {\n                this._query = search;\n                return search;\n            }\n        }\n        return search;\n    },\n    set: function(v) {\n        this._query = v;\n    }\n});\n\nObject.defineProperty(Url.prototype, \"path\", {\n    get: function() {\n        var p = this.pathname || \"\";\n        var s = this.search || \"\";\n        if (p || s) {\n            return p + s;\n        }\n        return (p == null && s) ? (\"/\" + s) : null;\n    },\n    set: function() {}\n});\n\nObject.defineProperty(Url.prototype, \"protocol\", {\n    get: function() {\n        var proto = this._protocol;\n        return proto ? proto + \":\" : proto;\n    },\n    set: function(v) {\n        if (typeof v === \"string\") {\n            var end = v.length - 1;\n            if (v.charCodeAt(end) === 0x3A /*':'*/) {\n                this._protocol = v.slice(0, end);\n            }\n            else {\n                this._protocol = v;\n            }\n        }\n        else if (v == null) {\n            this._protocol = null;\n        }\n    }\n});\n\nObject.defineProperty(Url.prototype, \"href\", {\n    get: function() {\n        var href = this._href;\n        if (!href) {\n            href = this._href = this.format();\n        }\n        return href;\n    },\n    set: function(v) {\n        this._href = v;\n    }\n});\n\nUrl.parse = function Url$Parse(str, parseQueryString, hostDenotesSlash, disableAutoEscapeChars) {\n    if (str instanceof Url) return str;\n    var ret = new Url();\n    ret.parse(str, !!parseQueryString, !!hostDenotesSlash, !!disableAutoEscapeChars);\n    return ret;\n};\n\nUrl.format = function Url$Format(obj) {\n    if (typeof obj === \"string\") {\n        obj = Url.parse(obj);\n    }\n    if (!(obj instanceof Url)) {\n        return Url.prototype.format.call(obj);\n    }\n    return obj.format();\n};\n\nUrl.resolve = function Url$Resolve(source, relative) {\n    return Url.parse(source, false, true).resolve(relative);\n};\n\nUrl.resolveObject = function Url$ResolveObject(source, relative) {\n    if (!source) return relative;\n    return Url.parse(source, false, true).resolveObject(relative);\n};\n\nfunction _escapePath(pathname) {\n    return pathname.replace(/[?#]/g, function(match) {\n        return encodeURIComponent(match);\n    });\n}\n\nfunction _escapeSearch(search) {\n    return search.replace(/#/g, function(match) {\n        return encodeURIComponent(match);\n    });\n}\n\n//Search `char1` (integer code for a character) in `string`\n//starting from `fromIndex` and ending at `string.length - 1`\n//or when a stop character is found\nfunction containsCharacter(string, char1, fromIndex, stopCharacterTable) {\n    var len = string.length;\n    for (var i = fromIndex; i < len; ++i) {\n        var ch = string.charCodeAt(i);\n\n        if (ch === char1) {\n            return true;\n        }\n        else if (stopCharacterTable[ch] === 1) {\n            return false;\n        }\n    }\n    return false;\n}\n\n//See if `char1` or `char2` (integer codes for characters)\n//is contained in `string`\nfunction containsCharacter2(string, char1, char2) {\n    for (var i = 0, len = string.length; i < len; ++i) {\n        var ch = string.charCodeAt(i);\n        if (ch === char1 || ch === char2) return true;\n    }\n    return false;\n}\n\n//Makes an array of 128 uint8's which represent boolean values.\n//Spec is an array of ascii code points or ascii code point ranges\n//ranges are expressed as [start, end]\n\n//Create a table with the characters 0x30-0x39 (decimals '0' - '9') and\n//0x7A (lowercaseletter 'z') as `true`:\n//\n//var a = makeAsciiTable([[0x30, 0x39], 0x7A]);\n//a[0x30]; //1\n//a[0x15]; //0\n//a[0x35]; //1\nfunction makeAsciiTable(spec) {\n    var ret = new Uint8Array(128);\n    spec.forEach(function(item){\n        if (typeof item === \"number\") {\n            ret[item] = 1;\n        }\n        else {\n            var start = item[0];\n            var end = item[1];\n            for (var j = start; j <= end; ++j) {\n                ret[j] = 1;\n            }\n        }\n    });\n\n    return ret;\n}\n\n\nvar autoEscape = [\"<\", \">\", \"\\\"\", \"`\", \" \", \"\\r\", \"\\n\",\n    \"\\t\", \"{\", \"}\", \"|\", \"\\\\\", \"^\", \"`\", \"'\"];\n\nvar autoEscapeMap = new Array(128);\n\n\n\nfor (var i = 0, len = autoEscapeMap.length; i < len; ++i) {\n    autoEscapeMap[i] = \"\";\n}\n\nfor (var i = 0, len = autoEscape.length; i < len; ++i) {\n    var c = autoEscape[i];\n    var esc = encodeURIComponent(c);\n    if (esc === c) {\n        esc = escape(c);\n    }\n    autoEscapeMap[c.charCodeAt(0)] = esc;\n}\nvar afterQueryAutoEscapeMap = autoEscapeMap.slice();\nautoEscapeMap[0x5C /*'\\'*/] = \"/\";\n\nvar slashProtocols = Url.prototype._slashProtocols = {\n    http: true,\n    https: true,\n    gopher: true,\n    file: true,\n    ftp: true,\n\n    \"http:\": true,\n    \"https:\": true,\n    \"gopher:\": true,\n    \"file:\": true,\n    \"ftp:\": true\n};\n\n//Optimize back from normalized object caused by non-identifier keys\nfunction f(){}\nf.prototype = slashProtocols;\n\nUrl.prototype._protocolCharacters = makeAsciiTable([\n    [0x61 /*'a'*/, 0x7A /*'z'*/],\n    [0x41 /*'A'*/, 0x5A /*'Z'*/],\n    0x2E /*'.'*/, 0x2B /*'+'*/, 0x2D /*'-'*/\n]);\n\nUrl.prototype._hostEndingCharacters = makeAsciiTable([\n    0x23 /*'#'*/, 0x3F /*'?'*/, 0x2F /*'/'*/, 0x5C /*'\\'*/\n]);\n\nUrl.prototype._autoEscapeCharacters = makeAsciiTable(\n    autoEscape.map(function(v) {\n        return v.charCodeAt(0);\n    })\n);\n\n//If these characters end a host name, the path will not be prepended a /\nUrl.prototype._noPrependSlashHostEnders = makeAsciiTable(\n    [\n        \"<\", \">\", \"'\", \"`\", \" \", \"\\r\",\n        \"\\n\", \"\\t\", \"{\", \"}\", \"|\",\n        \"^\", \"`\", \"\\\"\", \"%\", \";\"\n    ].map(function(v) {\n        return v.charCodeAt(0);\n    })\n);\n\nUrl.prototype._autoEscapeMap = autoEscapeMap;\nUrl.prototype._afterQueryAutoEscapeMap = afterQueryAutoEscapeMap;\n\nmodule.exports = Url;\n\nUrl.replace = function Url$Replace() {\n    __webpack_require__.c.url = {\n        exports: Url\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@kamilkisiela/fast-url-parser/src/urlparser.js\n");

/***/ })

};
;